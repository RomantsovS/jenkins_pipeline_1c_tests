# Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура СделатьСборкуСценариев() Экспорт
	
	Объект.Ошибки.Очистить();
	Объект.ИДЭталонныхБаз.Очистить();
	
	Попытка
		СканироватьКаталогИСобратьСборку();
	Исключение
		НоваяОшибка = Объект.Ошибки.Добавить();
		НоваяОшибка.ОписаниеОшибки =  ОписаниеОшибки();
		НоваяОшибка.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Объект.Ошибки.Количество() > 0 Тогда
		ЛогВыполнения = "";
		Для Каждого СтрокаОшибки Из Объект.Ошибки Цикл  
			ЛогВыполнения = ЛогВыполнения + СтрокаОшибки.ПодробноеПредставлениеОшибки + Символы.ПС;
		КонецЦикла;
		
		ЛогВыполнения = СтрШаблон(НСтр("ru = 'При выполнении возникли ошибки: %1'"),
									ЛогВыполнения);
		
		Сообщить(ЛогВыполнения);
		
		ЗаписатьФайлЛога(ЛогВыполнения);
		ЗаписатьФайлРезультата(1); 
		
	Иначе
		ЗаписатьФайлРезультата(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлYaml(ДанныеСценариев,Файл) Экспорт
	СчетчикСтрок = -1;
	ИмяФайла = Файл.ПолноеИмя;
	
	ДанныеФайлаYaml = Новый Соответствие;
	ДанныеФайлаYaml.Вставить("ПолноеИмяФайлаYaml",ИмяФайла);
	
	ДанныеСценариев.Добавить(Новый Структура("ИмяФайла,ДанныеФайлаYaml",ИмяФайла,ДанныеФайлаYaml));
	
	Попытка
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,"UTF-8");
		
		ТекОтступ = "";
		
		МассивДанных = Новый Массив;
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			МассивДанных.Добавить(Стр);
		КонецЦикла;	
		Текст.Закрыть();
		
		ТекЭлементДляВставки = Неопределено;
		ИдетСчитываниеМногострочнойСтроки = Ложь;
		МассивСтрок = Новый Массив;
		
		УровеньОбъектов = Новый Массив;
		ЗаполнитьУровниОбъектов(УровеньОбъектов);
		
		ЗначениеСтандартногоОтступа = 4;
		
		УровеньОбъектов[0] = ДанныеФайлаYaml;
		
		СчетчикСтрок = -1;
		КолСтрок = МассивДанных.Количество();
		Пока Истина Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
			Если СчетчикСтрок > КолСтрок-1 Тогда
				Прервать;
			КонецЕсли;	 
			
			ТекСтр = МассивДанных[СчетчикСтрок];
			СтрЛ = СокрЛ(ТекСтр);
			Если ИдетСчитываниеМногострочнойСтроки Тогда
				// ++ 10.11.2020 12:55:27 РоманцовС romantsov_s@rusklimat.ru / /
				//Если Лев(СтрЛ,13) = "ТипПараметра:" Тогда
				Если Лев(СтрЛ,13) = "ТипПараметра:" Или Лев(СтрЛ,18) = "ИсходящийПараметр:" Тогда
				// -- 10.11.2020 12:55:27 РоманцовС romantsov_s@rusklimat.ru / /
					ИдетСчитываниеМногострочнойСтроки = Ложь;
					ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
					ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
					УровеньОбъектов[ТекУровень].Вставить("Значение",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
				ИначеЕсли Лев(СтрЛ,21) = "ИмяПараметраПоСсылке:" Тогда
					ИдетСчитываниеМногострочнойСтроки = Ложь;
					ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
					ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
					УровеньОбъектов[ТекУровень].Вставить("ЗначениеПроизвольное",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ИдетСчитываниеМногострочнойСтроки Тогда
				Если ТекСтр = "" Тогда
					Продолжить;
				Иначе	
					//надо убрать отступ в начале строки
					ТекЭлементДляВставки.Добавить(Сред(ТекСтр,5));
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СокрЛП(ТекСтр) = "" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
			ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
			Если ТекУровень = 0 Тогда
				ТекЭлементДляВставки = ДанныеФайлаYaml;
			Иначе	
				ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
			КонецЕсли;	 
			
			Если ТекОтступ = 0 Тогда
				Имя      = Неопределено;
				Значение = Неопределено;
				ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
				
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
				ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
				ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
				ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
				
				ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
				
				ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
			Иначе
				Если Лев(СтрЛ,1) = "-" Тогда
					ЭлементМассива = Новый Соответствие;
					ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
					ТекЭлементДляВставки.Добавить(ЭлементМассива);
					УровеньОбъектов[ТекУровень+1] = ЭлементМассива;
				Иначе	
					Имя      = Неопределено;
					Значение = Неопределено;
					ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
					
					
					ПараметрыОбработки = Новый Структура;
					ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
					ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
					ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
					ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
					
					ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
					
					ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не смог прочитать файл %1. Строка №%2.'"),ИмяФайла,СчетчикСтрок+1);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибку(СтрокаОшибки) Экспорт
	
	Ошибка = СоздатьОписаниеОшибки();
	Ошибка.ТипОшибки              = НСтр("ru = 'Ошибка компиляции сценария'");
	
	Ошибка.УточнениеРасположения = СтрокаОшибки.ИмяСценария + Символы.ПС + СтрокаОшибки.ОписаниеОшибки;
	Ошибка.УточнениеРасположения = УдалитьПутьКаталога(Ошибка.УточнениеРасположения);
	Ошибка.УточнениеРасположения = УдалитьСтрокиМодуля(Ошибка.УточнениеРасположения);
	
	Ошибка.ИсходнаяИнформация = СтрокаОшибки.ИмяСценария + Символы.ПС + 
							УдалитьПутьКаталога(СтрокаОшибки.ПодробноеПредставлениеОшибки);
	Ошибка.ИсходнаяИнформация = СокрЛП(Ошибка.ИсходнаяИнформация);
	
	Ошибка.ПорядокВоспроизведения = УдалитьСтрокиМодуля(Ошибка.ИсходнаяИнформация, Истина);
	
	Ошибка.КодСценария = СтрокаОшибки.КодСценария;
	Ошибка.ИмяСценария = СтрокаОшибки.ИмяСценария;
	Ошибка.ДостоверностьОбнаружения = "Высокая";
	
	Если НЕ ЗначениеЗаполнено(Ошибка.КодСценария)
		И НЕ ЗначениеЗаполнено(Ошибка.ИмяСценария)
		И ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Ошибка.Ответственный = Объект.Ответственный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АбсолютныйОтветственный) Тогда
		Ошибка.Ответственный = Объект.АбсолютныйОтветственный;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.АдресРепозитория) Тогда
		Ошибка.АдресРепозитория = Объект.АдресРепозитория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИмяВетки) Тогда
		Ошибка.ИмяВетки = Объект.ИмяВетки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВерсияКонфигурации) Тогда
		Ошибка.ВерсияКонфигурации = Объект.ВерсияКонфигурации;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИмяКонфигурации) Тогда
		Ошибка.ИмяКонфигурации = Объект.ИмяКонфигурации;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаОбнаруженияОшибки) Тогда
		Ошибка.ДатаОбнаружения = Объект.ДатаОбнаруженияОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДополнениеТекстаОшибки) Тогда
		Ошибка.ПорядокВоспроизведения = Ошибка.ПорядокВоспроизведения + Символы.ПС + Объект.ДополнениеТекстаОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДополнениеПорядкаВоспроизведения) Тогда
		Ошибка.ПорядокВоспроизведения = Объект.ДополнениеПорядкаВоспроизведения + Символы.ПС + Ошибка.ПорядокВоспроизведения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаталогФайловОшибок) Тогда
	
		Файл = Новый Файл(Объект.КаталогФайловОшибок);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(Объект.КаталогФайловОшибок);
		ИначеЕсли НЕ Файл.ЭтоКаталог() Тогда
			УдалитьФайлы(Объект.КаталогФайловОшибок);
			СоздатьКаталог(Объект.КаталогФайловОшибок);
		КонецЕсли; 
		
		ИмяXML = СтрШаблон("Compile_Error_%1_%2", 
				Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"),
				Строка(Новый УникальныйИдентификатор()));

		ИмяФайлаОшибки = ДобавитьКонечныйРазделительПути(Объект.КаталогФайловОшибок);
		ИмяФайлаОшибки = СтрШаблон("%1%2.xml", ИмяФайлаОшибки, ИмяXML);

		
		Результат = Новый ТекстовыйДокумент;
		Результат.УстановитьТекст(ТекстОшибкиXML(Ошибка));
		Результат.Записать(ИмяФайлаОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьПутьКаталога(УточнениеОшибки)
	
	ФайлКаталогСценариев   = Новый Файл(Объект.КаталогСценариев);
	УточнениеОшибки = СтрЗаменить(УточнениеОшибки, ФайлКаталогСценариев.ПолноеИмя, "");
	
	ФайлКаталогПроцессов   = Новый Файл(Объект.КаталогПроцессов);
	УточнениеОшибки = СтрЗаменить(УточнениеОшибки, ФайлКаталогПроцессов.ПолноеИмя, "");

	Возврат УточнениеОшибки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.РаботаВРежимеВнешнейОбработки = Истина;
	
	ЗапуститьСборку  = Ложь;
	ЗавершатьРаботу  = Ложь;
	
	СтруктураПараметров = ПолучитьПараметрыИзСтроки(ПараметрЗапуска);
	ЗаполнитьПараметрыОбработки(СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("JsonParams")Тогда
		Объект.ИмяФайлаПараметрыJson = СтруктураПараметров.JsonParams;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаПараметрыJson);
		
		#Если Не ВебКлиент Тогда
		СтруктураПараметров = ПрочитатьJSON(ЧтениеJSON);
		ЗаполнитьПараметрыОбработки(СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Если Найти(ПараметрЗапуска, "СобратьСценарии") <> 0 Тогда
		ЗапуститьСборку  = Истина;
		ЗавершатьРаботу  = Истина;
		
		// ++ 12.05.2021 14:57:25 РоманцовС romantsov_s@rusklimat.ru / /
		Если СтрНайти(ПараметрЗапуска, "НеЗавершатьРаботу") <> 0 Тогда 
			ЗавершатьРаботу = Ложь;
		КонецЕсли;
		// -- 12.05.2021 14:57:25 РоманцовС romantsov_s@rusklimat.ru / /
	ИначеЕсли НЕ Объект.ПереданыПараметры Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Обработка не предназначена для непосредственного использования.
		|%1'"), ПараметрЗапуска);
	КонецЕсли;
	
	Попытка
		
		Если ЗапуститьСборку Тогда
			СделатьСборкуСценариев();
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Лог = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьФайлЛога(Лог);
		ЗаписатьФайлРезультата(1);
	КонецПопытки; 
	
	Если ЗавершатьРаботу Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьУровниОбъектов(УровеньОбъектов)
	Для Ккк = 1 По 10 Цикл
		УровеньОбъектов.Добавить(Неопределено);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуЗначенияYaml(Знач Имя,Знач Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки)
	Если Значение = "|" Тогда
		МассивСтрок = Новый Массив;
		ТекЭлементДляВставки.Вставить(Имя,МассивСтрок);
		ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки = Истина;
		ТекЭлементДляВставки        = МассивСтрок;
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = МассивСтрок; 
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		Значение = Сред(Значение,2);
		Значение = Лев(Значение,СтрДлина(Значение)-1);
		ТекЭлементДляВставки.Вставить(Имя,Значение);
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень] = ТекЭлементДляВставки; 
	ИначеЕсли Значение = "" Тогда
		Если ПараметрыОбработки.СчетчикСтрок <= МассивДанных.Количество()-2 Тогда
			СледущаяСтрока = СокрЛ(СледующаяЗначащаяСтрока(МассивДанных,ПараметрыОбработки.СчетчикСтрок+1));
			Если Лев(СледущаяСтрока,1) = "-" Тогда
				ЗначениеПараметра = Новый Массив;
			Иначе	
				ЗначениеПараметра = Новый Соответствие;
			КонецЕсли;	 
			ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = ЗначениеПараметра; 
			ТекЭлементДляВставки.Вставить(Имя,ЗначениеПараметра);
		КонецЕсли;	 
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка получения значения из строки: %1'"),
		                            МассивДанных[ПараметрыОбработки.СчетчикСтрок]);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция СледующаяЗначащаяСтрока(МассивДанных,Знач СчетчикСтрок)
	МаксКолСтрок = МассивДанных.Количество()-1;
	Пока МаксКолСтрок >= СчетчикСтрок Цикл
		Если ПустаяСтрока(МассивДанных[СчетчикСтрок]) Тогда
			СчетчикСтрок = СчетчикСтрок + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат МассивДанных[СчетчикСтрок]; 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ВернутьСпецСимволыYaml(Знач Стр)
	Стр = СтрЗаменить(Стр,"\""","""");
	Стр = СтрЗаменить(Стр,"\\","\");
	Возврат Стр; 
КонецФункции	 

&НаКлиенте
Процедура ЗначениеИзСтрокиYaml(Стр,Имя,Значение)
	Поз = Найти(Стр,":");
	Если Поз = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден символ : в строке: %1'"), Стр);
	КонецЕсли;	 
	   
	Имя      = СтрЗаменить(СокрЛП(Лев(Стр,  Поз - 1)), Символ(65279), "");
	Значение = СтрЗаменить(СокрЛП(Сред(Стр, Поз + 1)), Символ(65279), "");
	ВернутьКавычки = Ложь;
	Если Лев(Значение,1) = """" и Прав(Значение,1) = """" Тогда
		Значение = Сред(Значение,2,СтрДлина(Значение)-2);
		ВернутьКавычки = Истина;
	КонецЕсли;	 
	Значение = ВернутьСпецСимволыYaml(Значение);
	Если ВернутьКавычки  Тогда
		Значение = """" + Значение + """";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьJSONФайлНастроекЗапуска(Параметры,ИмяФайлаСценария,СценарийПоUID,ПроцессПоUID,ДанныеЭталонныхБД,КаталогПроекта)
	Объект.КаталогФреймворкаТестирования = ДополнитьРазделительПути(Объект.КаталогФреймворкаТестирования);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ФайлСценария = Новый Файл(ИмяФайлаСценария);
	
	ЭтоСценарий = Истина;
	UIDСценария = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
	UIDПроцесса = Неопределено;
	Если UIDСценария = Неопределено Тогда
		UIDПроцесса = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
		ДанныеВыгружаемогоОбъекта = ПроцессПоUID[UIDПроцесса];
		ЭтоСценарий = Ложь;
	Иначе	
		ДанныеВыгружаемогоОбъекта = СценарийПоUID[UIDСценария];
	КонецЕсли;	 
	
	
	ИмяФайлаJSON = ФайлСценария.Путь + ФайлСценария.ИмяБезРасширения + ".json";
	ЗаписьJson.ОткрытьФайл(ИмяФайлаJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяСборки");
	ЗаписьJSON.ЗаписатьЗначение(УбратьЗапрещенныеСимволыИзИмениФайла(Параметры.ИмяНастройкиСценария));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СценарийНаименование");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["СценарийНаименование"]);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("НастройкиСценарияНаименование");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ИмяНастройкиСценария);
	
	ПутьКФиче = ИмяФайлаСценария;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогФич");
	ЗаписьJSON.ЗаписатьЗначение(ПутьКФиче);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогПроекта");
	ЗаписьJSON.ЗаписатьЗначение(КаталогПроекта);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогиБиблиотек");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогФреймворкаТестирования + "features\Libraries");
	Если ЗначениеЗаполнено(Объект.КаталогиБиблиотек) Тогда
		МассивКаталогов = СтрРазделить(Объект.КаталогиБиблиотек,"|");
		Для Каждого КаталогБиблиотеки Из МассивКаталогов Цикл
			ЗаписьJSON.ЗаписатьЗначение(КаталогБиблиотеки);
		КонецЦикла;	
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("БазаID");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ИдентификаторБазы);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрофильПользователяНастройкаТеста");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"]);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрофильПользователяСценарий");
	Если ЭтоСценарий Тогда
		ЗаписьJSON.ЗаписатьЗначение(ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["ПрофильПользователя"]);
	Иначе	
		ЗаписьJSON.ЗаписатьЗначение("");
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Ответственный");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.Ответственный);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ЗапускатьКлиентТестированияСМаксимизированнымОкном");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыполнитьСценарии");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.РежимОтладки Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗавершитьРаботуСистемы");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗакрытьTestClientПослеЗапускаСценариев");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
		ЗаписьJSON.ЗаписатьИмяСвойства("ОстановкаПриВозникновенииОшибки");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗавершитьРаботуСистемы");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗакрытьTestClientПослеЗапускаСценариев");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
		ЗаписьJSON.ЗаписатьИмяСвойства("ОстановкаПриВозникновенииОшибки");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПриравниватьPendingКFailed");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СобиратьДанныеОСостоянииАктивнойФормыПриОшибке");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СобиратьДанныеОСостоянииВсехФормПриОшибке");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВЖР");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВЖР");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеАллюр");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеАллюр");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеjUnit");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеjUnit");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеCucumber Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеCucumberJson");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеCucumberJson");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеСППР Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеСППР");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеСППР");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВТекстовыйФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыводитьВЛогВыполнениеШагов");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогОшибокВТекстовыйФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.БезопасноеВыполнениеШагов Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("БезопасноеВыполнениеШагов");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства("БезопасноеВыполнениеШагов");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.КаталогOutputAllureБазовый) Тогда
	//	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиAllureБазовый");
	//	КаталогOutputAllure = ДополнитьРазделительПути(Объект.КаталогOutputAllureБазовый) 
	//						+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
	//	ЗаписьJSON.ЗаписатьЗначение(КаталогOutputAllure);
	//КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиAllure");
	Если ЗначениеЗаполнено(Объект.КаталогOutputAllureБазовый) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогOutputAllureБазовый);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/allurereport");
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиjUnit");
	Если ЗначениеЗаполнено(Объект.КаталогOutputjUnit) Тогда
		КаталогOutputjUnit = ДополнитьРазделительПути(Объект.КаталогOutputjUnit) 
							+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
		ЗаписьJSON.ЗаписатьЗначение(КаталогOutputjUnit);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/junitreport");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиСППР");
	Если ЗначениеЗаполнено(Объект.КаталогОтчетаСППР) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогОтчетаСППР);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/spprreport");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиCucumberJson");
	Если ЗначениеЗаполнено(Объект.КаталогOutputCucumber) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогOutputCucumber);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/cucumber");
	КонецЕсли; 
	
	//ЗаписьJSON.ЗаписатьИмяСвойства("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки");
	//ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьСкриншотПриВозникновенииОшибки");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	// ++ 24.12.2020 11:07:19 РоманцовС romantsov_s@rusklimat.ru / MISC-16 /
	ЗаписьJSON.ЗаписатьИмяСвойства("СниматьСкриншотКаждогоОкна1С");
	//ЗаписьJSON.ЗаписатьЗначение("Ложь");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИспользоватьКомпонентуVanessaExt");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИспользоватьВнешнююКомпонентуДляСкриншотов");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	#Если НЕ ВебКлиент Тогда
	ЗаписьJSON.ЗаписатьИмяСвойства("СпособСнятияСкриншотовВнешнейКомпонентой");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока("2"));
	#КонецЕсли
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureДанныеОПроцессахОС");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	// -- 24.12.2020 11:07:19 РоманцовС romantsov_s@rusklimat.ru / MISC-16 /
	
	#Если НЕ ВебКлиент Тогда
	ЗаписьJSON.ЗаписатьИмяСвойства("КоличествоСекундПоискаОкна");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.КоличествоСекундПоискаОкна));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КоличествоПопытокВыполненияДействия");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.КоличествоПопытокВыполненияДействия));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ТаймаутЗапуска1С");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ТаймаутЗапуска1С));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПаузаПриОткрытииОкна");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ПаузаПриОткрытииОкна));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ТаймаутДляАсинхронныхШагов");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ТаймаутДляАсинхронныхШагов));
	#КонецЕсли
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиСкриншотов");
	Если ЗначениеЗаполнено(Объект.КаталогOutputСкриншоты) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогOutputСкриншоты);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./ScreenShots");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяФайлаЛогВыполненияСценариев");
	Если ЗначениеЗаполнено(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ИмяФайлаЛогВыполненияСценариев);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./Лог.txt");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКаталогаЛогОшибок");
	Если ЗначениеЗаполнено(Объект.ИмяКаталогаОшибок) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ИмяКаталогаОшибок);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("КомандаСделатьСкриншот");
		ЗаписьJSON.ЗаписатьЗначение(Объект.КомандаСделатьСкриншот);
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыгружатьСтатусВыполненияСценариевВФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев");
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./BuildStatus.log");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыполнятьШагиАссинхронно");
	ЗаписьJSON.ЗаписатьЗначение("Ложь");
	
	//КлиентыТестирования
	ЗаписьJSON.ЗаписатьИмяСвойства("КлиентыТестирования");
	
	Если ЭтоСценарий Тогда
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
		Если ЭтоСценарий Тогда
			ИмяПрофиляПользователя = ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["ПрофильПользователя"];
			Если ЗначениеЗаполнено(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"]) Тогда
				//если в настройке указан профиль пользователя то берём его
				ИмяПрофиляПользователя = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"];
			КонецЕсли;	 
			ЗаписьJSON.ЗаписатьЗначение(ИмяПрофиляПользователя);
		Иначе	
			ЗаписьJSON.ЗаписатьЗначение("");
		КонецЕсли;	 
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКИнфобазе");
		
		ПутьКИнфобазе = ПутьКИнфобазе();
		
		ЗаписьJSON.ЗаписатьЗначение(ПутьКИнфобазе);
		
		Логин = Неопределено;
		Пароль = Неопределено;
		ЗаписьJSON.ЗаписатьИмяСвойства("ДопПараметры");
		Для Каждого ЭталоннаяБД Из ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"] Цикл
			Если ЭталоннаяБД["ИдентификаторБазы"] = Параметры.ИдентификаторБазы Тогда
				Для Каждого ПрофильПользователя Из ЭталоннаяБД["ПрофилиПользователей"] Цикл
					Если ПрофильПользователя["ПрофильПользователя"] = ИмяПрофиляПользователя Тогда
						Логин  = ПрофильПользователя["Логин"];
						Пароль = ПрофильПользователя["Пароль"];
					КонецЕсли;	 
				КонецЦикла;	
				
			КонецЕсли;	 
		КонецЦикла;	
		
		ПараметрыЗапуска = "/N""" + Логин + """ /P""" + Пароль + """ " 
		+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];
		
		Если Найти(НРег(ПараметрыЗапуска),НРег("AllowExecuteScheduledJobs")) = 0 Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /AllowExecuteScheduledJobs -Off ";
		КонецЕсли;	 	  
		
		Если ЗначениеЗаполнено(Объект.ДопПараметрыКлиентаТестирования) Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " " + Объект.ДопПараметрыКлиентаТестирования;
		КонецЕсли;	 
		
		ПараметрыЗапуска = ПараметрыЗапуска + " /DisableStartupMessages ";
		
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыЗапуска);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ТипКлиента");
		ЗаписьJSON.ЗаписатьЗначение(ТипКлиента());
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКомпьютера");
		ЗаписьJSON.ЗаписатьЗначение("localhost");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ПортЗапускаТестКлиента");
		ЗаписьJSON.ЗаписатьЗначение(ПортЗапускаТестКлиента());
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецМассива();
	Иначе
		ПрофилиПользователей = Новый Соответствие;
		ШагиПроцесса = ДанныеВыгружаемогоОбъекта["ШагиПроцесса"];
		Для Каждого ШагПроцесса Из ШагиПроцесса Цикл
			ИсполнительШага = ШагПроцесса["ИсполнительНаименование"];
			Если ПрофилиПользователей[ИсполнительШага] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Профиль = Новый Структура;
			Профиль.Вставить("Имя",ИсполнительШага);
			Профиль.Вставить("ПутьКИнфобазе",ПутьКИнфобазе());
			Профиль.Вставить("ТипКлиента",ТипКлиента());
			Профиль.Вставить("ИмяКомпьютера","localhost");
			Профиль.Вставить("ПортЗапускаТестКлиента",ПортЗапускаТестКлиента());
			
			Логин = Неопределено;
			Пароль = Неопределено;
			Для Каждого ЭталоннаяБД Из ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"] Цикл
				Если ЭталоннаяБД["ИдентификаторБазы"] = Параметры.ИдентификаторБазы Тогда
					Для Каждого ПрофильПользователя Из ЭталоннаяБД["ПрофилиПользователей"] Цикл
						Если ПрофильПользователя["ПрофильПользователя"] = ИсполнительШага Тогда
							Логин  = ПрофильПользователя["Логин"];
							Пароль = ПрофильПользователя["Пароль"];
						КонецЕсли;	 
					КонецЦикла;	
					
				КонецЕсли;	 
			КонецЦикла;	
			
			ПараметрыЗапуска = "/N""" + Логин + """ /P""" + Пароль + """ " 
			+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];
			
			Если Найти(НРег(ПараметрыЗапуска),НРег("AllowExecuteScheduledJobs")) = 0 Тогда
				ПараметрыЗапуска = ПараметрыЗапуска + " /AllowExecuteScheduledJobs -Off ";
			КонецЕсли;	 	  
			
			Если ЗначениеЗаполнено(Объект.ДопПараметрыКлиентаТестирования) Тогда
				ПараметрыЗапуска = ПараметрыЗапуска + " " + Объект.ДопПараметрыКлиентаТестирования;
			КонецЕсли;	 
			
			ПараметрыЗапуска = ПараметрыЗапуска + " /DisableStartupMessages ";
			
			
			Профиль.Вставить("ДопПараметры",ПараметрыЗапуска);
			
			
			ПрофилиПользователей.Вставить(ИсполнительШага,Профиль);
		КонецЦикла;	 
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Для Каждого Элем Из ПрофилиПользователей Цикл
			ПрофильПользователя = Элем.Значение;
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.Имя);
			ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКИнфобазе");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ПутьКИнфобазе);
			ЗаписьJSON.ЗаписатьИмяСвойства("ТипКлиента");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ТипКлиента);
			ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКомпьютера");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ИмяКомпьютера);
			ЗаписьJSON.ЗаписатьИмяСвойства("ПортЗапускаТестКлиента");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ПортЗапускаТестКлиента);
			ЗаписьJSON.ЗаписатьИмяСвойства("ДопПараметры");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ДопПараметры);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;	 
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
	КонецЕсли;	 
	
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ПортЗапускаТестКлиента()
	Если ПустаяСтрока(Объект.ПортЗапускаТестКлиента) Тогда
		Возврат "48000";
	Иначе 
		Возврат Объект.ПортЗапускаТестКлиента;
	КонецЕсли;
КонецФункции	 

&НаКлиенте
Функция ТипКлиента()
	Если ПустаяСтрока(Объект.ТипКлиента) Тогда
		Возврат "Тонкий";
	Иначе 
		Возврат Объект.ТипКлиента;
	КонецЕсли;
КонецФункции	 

&НаКлиенте
Функция ПутьКИнфобазе()
	Если ПустаяСтрока(Объект.ПутьКИнфобазе) Тогда 
		ПутьКИнфобазе = Объект.КаталогБазыДляЗапуска;
		Если Найти(НРег(ПутьКИнфобазе),"srvr=") = 0 и Найти(НРег(ПутьКИнфобазе),"file=") = 0 Тогда
			ПутьКИнфобазе = "File=""" + Объект.КаталогБазыДляЗапуска + """;";
		КонецЕсли;
	Иначе 
		ПутьКИнфобазе = объект.ПутьКИнфобазе;
	КонецЕсли;
	
	Возврат ПутьКИнфобазе; 
КонецФункции	 

&НаКлиенте
Процедура ДобавитьКлючЗначениеВJson(ЗаписьJSON,Ключ,Значение)
	ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
	ЗаписьJSON.ЗаписатьЗначение(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлДанныеСтрок(Элем,ИмяФайлаДанныеСтрок)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJson.ОткрытьФайл(ИмяФайлаДанныеСтрок);
	
	ЗаписьJson.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДанныеСценария");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Для Каждого ДанныеСтроки Из Элем.ДанныеНомеровСтрок Цикл
		ЗаписьJson.ЗаписатьНачалоОбъекта();
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Имя",ДанныеСтроки.ИмяСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Код",ДанныеСтроки.КодСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Основной",ДанныеСтроки.Основной);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ТекстШага",ДанныеСтроки.ТекстШага);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"СтрокаЛин",ДанныеСтроки.НомерСтрокиЛинейногоСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"СтрокаОриг",ДанныеСтроки.НомерСтрокиТекстаСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"УровеньВложенности",ДанныеСтроки.УровеньВложенности);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"UIDСценария",ДанныеСтроки.UIDСценария);
		ЗаписьJson.ЗаписатьКонецОбъекта();
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	
	ЗаписьJson.ЗаписатьКонецОбъекта();
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция УбратьЗапрещенныеСимволыИзИмениФайла(Знач Стр) 
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"+","");
	
	Стр = СтрЗаменить(Стр,".","");
	
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура СгенерироватьУникальноеИмяФайлаСценария(ОсновноеИмяФайла,Расширение)
	ИмяФайла = ОсновноеИмяФайла + Расширение;
	Файл = Новый Файл(ИмяФайла);
	
	Счетчик = 0;
	Пока Файл.Существует() Цикл
		Счетчик       = Счетчик + 1;
		СчетчикСтрока = СтрЗаменить(Счетчик,Символы.НПП,"");
		
		ОсновноеИмяФайла = ОсновноеИмяФайла + "_" + СчетчикСтрока;
		
		ИмяФайла = ОсновноеИмяФайла + Расширение;
		Файл = Новый Файл(ИмяФайла);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СборкаСценариевИПроцессовНаКлиенте(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД)
	СборкаСценариевИПроцессовСервер(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД);
	
	СценарийПоUID = Новый Соответствие;
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.ДанныеФайлаYaml["ТипФайла"] = "Сценарий" Тогда
			СценарийПоUID.Вставить(Элем.ДанныеФайлаYaml["ДанныеСценария"]["UID"],Элем.ДанныеФайлаYaml);
		КонецЕсли;	 
	КонецЦикла;	
	ПроцессПоUID = Новый Соответствие;
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		Если Элем.ДанныеФайлаYaml["ТипФайла"] = "Процесс" Тогда
			ПроцессПоUID.Вставить(Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["UID"],Элем.ДанныеФайлаYaml);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		ДанныеКаталогаСценариев.Добавить(Элем);
	КонецЦикла;	 
	
	Объект.КаталогДляЛинейныхСценариев = ДополнитьРазделительПути(Объект.КаталогДляЛинейныхСценариев);
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			КаталогЭталоннойБазы = Объект.КаталогДляЛинейныхСценариев 
			   + УбратьЗапрещенныеСимволыИзИмениФайла(Элем.ИдентификаторБазы);
			   
			КаталогЭталоннойБазы = ДополнитьРазделительПути(КаталогЭталоннойБазы);
			
			КаталогНастройкиЗапуска = ДополнитьРазделительПути(КаталогЭталоннойБазы + Элем.КодНастройкиСценария);
			ФайлКаталогНастройкиЗапуска = Новый Файл(КаталогНастройкиЗапуска);
			Если Не ФайлКаталогНастройкиЗапуска.Существует() Тогда
				СоздатьКаталог(КаталогНастройкиЗапуска);
			КонецЕсли;	 
			
			ФайлКаталогЭталоннойБазы = Новый Файл(КаталогЭталоннойБазы);
			Если Не ФайлКаталогЭталоннойБазы.Существует() Тогда
				СоздатьКаталог(КаталогЭталоннойБазы);
			КонецЕсли;	 
			
			ОсновноеИмяФайла = КаталогЭталоннойБазы + УбратьЗапрещенныеСимволыИзИмениФайла(Элем.КодНастройкиСценария); 
			
			СгенерироватьУникальноеИмяФайлаСценария(ОсновноеИмяФайла,".feature");
			
			ИмяФайлаСценария    = ОсновноеИмяФайла + ".feature";
			ИмяФайлаДанныеСтрок = ОсновноеИмяФайла + ".str";
			
			ЗТ = Новый ЗаписьТекста(ИмяФайлаСценария,"UTF-8",,Ложь); 
			ЗТ.ЗаписатьСтроку(Элем.ЛинейныйСценарий); 
			ЗТ.Закрыть();
			
			КаталогФайловНастройкиЗапуска = ДополнитьРазделительПути(КаталогНастройкиЗапуска + "Файлы");
			ФайлКаталогФайловНастройкиЗапуска = Новый Файл(КаталогФайловНастройкиЗапуска);
			Если Не ФайлКаталогФайловНастройкиЗапуска.Существует() Тогда
				СоздатьКаталог(КаталогФайловНастройкиЗапуска);
			КонецЕсли;	 
			
			ИмяФайлаНастройки = Элем.ИмяФайла;
			ФайлИмяФайлаНастройки = Новый Файл(ИмяФайлаНастройки);
			КаталогНастройки = ДополнитьРазделительПути(ФайлИмяФайлаНастройки.Путь);
			ФайлКаталогНастройки = Новый Файл(КаталогНастройки);
			
			Если Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаТеста" Тогда
				КаталогСценария = ДополнитьРазделительПути(ФайлКаталогНастройки.Путь);
				КаталогФайловСценария = КаталогСценария + "files";
				UIDСценария    = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
				ДанныеСценария = СценарийПоUID[UIDСценария];
				Если ДанныеСценария = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не смог найти данные сценария по UID: %1. Тест %2'"),
					UIDСценария,Элем.ИмяНастройкиСценария);
				КонецЕсли;	 
				
				ВложенныеСценарии = ДанныеСценария["ВложенныеСценарии"]; 
				ОбработанныеСценарии = Новый Массив;
				ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
				ВложенныеСценарии,СценарийПоUID,Элем,ОбработанныеСценарии);
				
				СкопироватьФайлыКаталога(КаталогФайловСценария,КаталогФайловНастройкиЗапуска);
			ИначеЕсли Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаПроцесса" Тогда
				КаталогПроцесса = ДополнитьРазделительПути(ФайлКаталогНастройки.Путь);
				КаталогФайловПроцесса = КаталогПроцесса + "files";
				UIDПроцесса = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
				ДанныеПроцесса = ПроцессПоUID[UIDПроцесса];
				Если ДанныеПроцесса = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не смог найти данные сценария по UID: %1. Тест <%2>.'"),
					UIDСценария,Элем.ИмяНастройкиСценария);
				КонецЕсли;	 
				
				СкопироватьФайлыКаталога(КаталогФайловПроцесса,КаталогФайловНастройкиЗапуска);
				
				ОбработанныеСценарии = Новый Массив;
				ШагиПроцесса = ДанныеПроцесса["ШагиПроцесса"];
				Для Каждого ШагПроцесса Из ШагиПроцесса Цикл
					Если ПустаяСтрока(ШагПроцесса["СценарийНаименование"]) Тогда
						Продолжить;
					КонецЕсли;	 
					UIDСценария    = ШагПроцесса["СценарийUID"];
					ДанныеСценария = СценарийПоUID[UIDСценария];
					Если ДанныеСценария = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Не смог найти данные сценария по UID: %1. Тест <%2>.'"),
						UIDСценария,Элем.ИмяНастройкиСценария);
					КонецЕсли;	 
					
					ВложенныеСценарии = ДанныеСценария["ВложенныеСценарии"]; 
					ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
					ВложенныеСценарии,СценарийПоUID,Элем,ОбработанныеСценарии);
					
					ФайлСценария = Новый Файл(ДанныеСценария["ПолноеИмяФайлаYaml"]);
					КаталогСценария = ДополнитьРазделительПути(ФайлСценария.Путь);
					КаталогФайловСценария = КаталогСценария + "files";
					СкопироватьФайлыКаталога(КаталогФайловСценария,КаталогФайловНастройкиЗапуска);
				КонецЦикла;	 
				
				СкопироватьФайлыКаталога(КаталогФайловПроцесса,КаталогФайловНастройкиЗапуска);
				
			КонецЕсли;	 
			
			СоздатьJSONФайлНастроекЗапуска(Элем,ИмяФайлаСценария,СценарийПоUID,ПроцессПоUID,ДанныеЭталонныхБД,КаталогНастройкиЗапуска);
			ЗаписатьФайлДанныеСтрок(Элем,ИмяФайлаДанныеСтрок);
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,ВложенныеСценарии,СценарийПоUID,ДанныеНастройкиСценария,ОбработанныеСценарии)
	Если ТипЗнч(ВложенныеСценарии) = Тип("Массив") Тогда
		Для Каждого ВложенныйСценарий Из ВложенныеСценарии Цикл
			UIDВложенныйСценарий = ВложенныйСценарий["UIDВложенныйСценарий"];
			Если ОбработанныеСценарии.Найти(UIDВложенныйСценарий) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ОбработанныеСценарии.Добавить(UIDВложенныйСценарий);
			
			СвойстваВложенногоСценария = СценарийПоUID[UIDВложенныйСценарий];
			Если СвойстваВложенногоСценария = Неопределено Тогда
				ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не смог найти данные вложенного сценария по UID: <%1>, Имя: <%2>. Тест: <%3>'"),
				UIDВложенныйСценарий,ВложенныйСценарий["ИмяСценария"],ДанныеНастройкиСценария.ИмяНастройкиСценария);
			КонецЕсли;	 
			
			ВложенныеСценарииСценария = СвойстваВложенногоСценария["ВложенныеСценарии"]; 
			ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
			      ВложенныеСценарииСценария,СценарийПоUID,ДанныеНастройкиСценария,ОбработанныеСценарии);
			

			
			ИмяФайлаВложенногоСценария = СвойстваВложенногоСценария["ПолноеИмяФайлаYaml"];
			ФайлВложенногоСценария = Новый Файл(ИмяФайлаВложенногоСценария);
			КаталогВложенногоСценария = ФайлВложенногоСценария.Путь;
			КаталогФайловВложенногоСценария = ДополнитьРазделительПути(КаталогВложенногоСценария) + "files";
			
			СкопироватьФайлыКаталога(КаталогФайловВложенногоСценария,КаталогФайловНастройкиЗапуска);
		КонецЦикла;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура СкопироватьФайлыКаталога(КаталогИсходник,КаталогПриемник)
	Файлы = НайтиФайлы(КаталогИсходник,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		НовоеИмяФайла = КаталогПриемник + Файл.Имя;
		КопироватьФайл(Файл.ПолноеИмя,НовоеИмяФайла);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СборкаСценариевИПроцессовСервер(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев,ДанныеЭталонныхБД)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ДанныеСценариев = Новый ТаблицаЗначений;
	ОбъектСервер.ТекстыСценариевИзТекстовыхДанных(ДанныеКаталогаСценариев,ДанныеЭталонныхБД,ДанныеСценариев);
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			ОбъектСервер.ВернутьУгловыеСкобки(Элем.ЛинейныйСценарий);
			ОбъектСервер.РазэкранироватьУгловыеСкобки(Элем.ЛинейныйСценарий);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ОбъектСервер.ТекстыПроцессовИзТекстовыхДанных(ДанныеКаталогаПроцессов,ДанныеСценариев,ДанныеЭталонныхБД);
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			ОбъектСервер.ВернутьУгловыеСкобки(Элем.ЛинейныйСценарий);
			ОбъектСервер.РазэкранироватьУгловыеСкобки(Элем.ЛинейныйСценарий);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ДополнитьРазделительПути(Знач Путь)
	СимволСлеша = ПолучитьРазделительПути();
	Если Прав(Путь,1) <> СимволСлеша Тогда
		Путь = Путь + СимволСлеша;
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции

&НаКлиенте
Процедура ОчиститьКаталог(Каталог)
	Каталоги = Новый Массив;
	
	Файлы = НайтиФайлы(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Каталоги.Добавить(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	Для Каждого ПолноеИмяКаталога Из Каталоги Цикл
		УдалитьФайлы(ПолноеИмяКаталога);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьКаталогИСобратьСборку()
	
	Если Объект.КаталогСценариевПрочитан Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КаталогСценариев) Тогда
		ВызватьИсключение (НСтр("ru = 'Не указан каталог сценариев.'"));
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(Объект.ИмяФайлаЭталонныхБД) Тогда
		ВызватьИсключение (НСтр("ru = 'Не указано имя файла эталонных БД.'"));
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ИмяФайлаЭталонныхБД);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение (НСтр("ru = 'Не существует файл эталонных БД'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КаталогДляЛинейныхСценариев) Тогда
		ВызватьИсключение (НСтр("ru = 'Не указан каталог для линейных сценариев.'"));
	КонецЕсли;	 
	
	ОчиститьКаталог(Объект.КаталогДляЛинейныхСценариев);
	
	НайденныеФайлы = НайтиФайлы(Объект.КаталогСценариев, "*.yaml", Истина);
	ДанныеКаталогаСценариев = Новый Массив;
	Для Каждого Файл Из НайденныеФайлы Цикл
		ПрочитатьФайлYaml(ДанныеКаталогаСценариев, Файл);
	КонецЦикла;
	
	НайденныеФайлы = НайтиФайлы(Объект.КаталогПроцессов, "*.yaml", Истина);
	ДанныеКаталогаПроцессов = Новый Массив;
	Для Каждого Файл Из НайденныеФайлы Цикл
		ПрочитатьФайлYaml(ДанныеКаталогаПроцессов, Файл);
	КонецЦикла;
	
	
	ДанныеЭталонныхБД = Новый Массив;
	
	Файл = Новый Файл(Объект.ИмяФайлаЭталонныхБД);
	ПрочитатьФайлYaml(ДанныеЭталонныхБД, Файл);
	
	СборкаСценариевИПроцессовНаКлиенте(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД);
КонецПроцедуры

// Получает значения параметров из строки.
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра - имя параметра; 
//                                Значение - его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
//                              кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//  Разделитель - Строка - символ, которым фрагменты отделяются друг от друга.
//
// Возвращаемое значение:
//  Структура - структура параметров, где ключ - имя параметра, значение - значение параметра.
//
&НаКлиенте
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";")
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ = Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлРезультата(Результат)

	Если ЗначениеЗаполнено(ФайлРезультата) Тогда
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат);
		Файл.Записать(ФайлРезультата);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлЛога(Лог)

	Если ЗначениеЗаполнено(ФайлЛога) Тогда
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Лог);
		Файл.Записать(ФайлЛога);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОбработки(СтруктураПараметров)
	Если СтруктураПараметров.Свойство("ExternalMode") и ВРег(СтруктураПараметров.ExternalMode) = "TRUE" Тогда
		Объект.РаботаВРежимеВнешнейОбработки = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПереданыПараметры") и СтруктураПараметров.ПереданыПараметры Тогда
		Объект.ПереданыПараметры = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScenarioFolder") Тогда
		Объект.КаталогСценариев = СтруктураПараметров.ScenarioFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ModelDBid") Тогда
		Объект.ИдБазыСборки = СтруктураПараметров.ModelDBid;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ModelDBSettings") Тогда
		Объект.ИмяФайлаЭталонныхБД = СтруктураПараметров.ModelDBSettings;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("FeatureFolder") Тогда
		Объект.КаталогДляЛинейныхСценариев = СтруктураПараметров.FeatureFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ProcessFolder") Тогда
		Объект.КаталогПроцессов = СтруктураПараметров.ProcessFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("LaunchDBFolder") Тогда
		Объект.КаталогБазыДляЗапуска = СтруктураПараметров.LaunchDBFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("VanessaFolder") Тогда
		Объект.КаталогФреймворкаТестирования = СтруктураПараметров.VanessaFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("AllureFolder") Тогда
		Объект.КаталогOutputAllureБазовый = СтруктураПараметров.AllureFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("jUnitFolder") Тогда
		Объект.КаталогOutputjUnit = СтруктураПараметров.jUnitFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("SPPRReportFolder") Тогда
		Объект.КаталогОтчетаСППР = СтруктураПараметров.SPPRReportFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("CucumberFolder") Тогда
		Объект.КаталогOutputCucumber = СтруктураПараметров.CucumberFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Libraries") Тогда
		Объект.КаталогиБиблиотек = СтруктураПараметров.Libraries;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScenarioLogFile") Тогда
		Объект.ИмяФайлаЛогВыполненияСценариев = СтруктураПараметров.ScenarioLogFile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("BDDLogFolder") Тогда
		Объект.ИмяКаталогаОшибок = СтруктураПараметров.BDDLogFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScenarioOutFile") Тогда
		Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = СтруктураПараметров.ScenarioOutFile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScreenshotCaptureCommand") Тогда
		Объект.КомандаСделатьСкриншот = СтруктураПараметров.ScreenshotCaptureCommand;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScreenshotsFolder") Тогда
		Объект.КаталогOutputСкриншоты = СтруктураПараметров.ScreenshotsFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ResultFile") Тогда
		ФайлРезультата = СтруктураПараметров.ResultFile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("LogFile") Тогда
		ФайлЛога = СтруктураПараметров.LogFile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("InfobasePath") Тогда
		Объект.ПутьКИнфобазе = СтруктураПараметров.InfobasePath;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("TestClientType") Тогда
		Объект.ТипКлиента = СтруктураПараметров.TestClientType;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("TestClientPort") Тогда
		Объект.ПортЗапускаТестКлиента = СтруктураПараметров.TestClientPort;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("DebugMode") Тогда
		Объект.РежимОтладки = СтруктураПараметров.DebugMode;
	КонецЕсли;
	
	Объект.ПаузаПриОткрытииОкна = 1;
	Если СтруктураПараметров.Свойство("PauseOnWindowOpening")
			И ЗначениеЗаполнено(СтруктураПараметров.PauseOnWindowOpening) Тогда
		Объект.ПаузаПриОткрытииОкна = СтруктураПараметров.PauseOnWindowOpening;
	КонецЕсли;
	
	Объект.ДелатьОтчетВФорматеАллюр    = Истина;
	Объект.ДелатьОтчетВФорматеjUnit    = Истина;
	Объект.ДелатьОтчетВФорматеCucumber = Ложь;
	Объект.БезопасноеВыполнениеШагов = Ложь;
	
	Если СтруктураПараметров.Свойство("AllureReport") Тогда
		Объект.ДелатьОтчетВФорматеАллюр = СтруктураПараметров.AllureReport;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("SPPRReport") Тогда
		Объект.ДелатьОтчетВФорматеСППР = СтруктураПараметров.SPPRReport;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("SafeStepsExecution") 
		И ЗначениеЗаполнено(СтруктураПараметров.SafeStepsExecution) Тогда
		Объект.БезопасноеВыполнениеШагов = СтруктураПараметров.SafeStepsExecution;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("jUnitReport") Тогда
		Объект.ДелатьОтчетВФорматеjUnit = СтруктураПараметров.jUnitReport;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("CucumberReport") Тогда
		Объект.ДелатьОтчетВФорматеCucumber = СтруктураПараметров.CucumberReport;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("EventLog") Тогда
		Объект.ДелатьЛогВыполненияСценариевВЖР = СтруктураПараметров.EventLog;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ExtraParams") Тогда
		Объект.ДопПараметрыКлиентаТестирования = СтруктураПараметров.ExtraParams;
	КонецЕсли;
	
	Объект.КоличествоСекундПоискаОкна = "120";
	Если СтруктураПараметров.Свойство("WaitWindowTime") И ЗначениеЗаполнено(СтруктураПараметров.WaitWindowTime) Тогда
		Объект.КоличествоСекундПоискаОкна = СтруктураПараметров.WaitWindowTime;
	КонецЕсли;
	
	Объект.КоличествоПопытокВыполненияДействия = "20";
	Если СтруктураПараметров.Свойство("NumberOfAttempts") И ЗначениеЗаполнено(СтруктураПараметров.NumberOfAttempts) Тогда
		Объект.КоличествоПопытокВыполненияДействия = СтруктураПараметров.NumberOfAttempts;
	КонецЕсли;
	
	Объект.ТаймаутДляАсинхронныхШагов = "600";
	Если СтруктураПараметров.Свойство("TimeoutForAsyncSteps") 
		И ЗначениеЗаполнено(СтруктураПараметров.TimeoutForAsyncSteps) Тогда
		Объект.ТаймаутДляАсинхронныхШагов = СтруктураПараметров.TimeoutForAsyncSteps;
	КонецЕсли;
	
	Объект.ТаймаутЗапуска1С = "500";
	Если СтруктураПараметров.Свойство("TimeoutTestClientStart") 
		И ЗначениеЗаполнено(СтруктураПараметров.TimeoutTestClientStart) Тогда
		Объект.ТаймаутЗапуска1С = СтруктураПараметров.TimeoutTestClientStart;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ErrorFolder") Тогда
		Объект.КаталогФайловОшибок = СтруктураПараметров.ErrorFolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ErrorAddInfo") Тогда
		Объект.ДополнениеТекстаОшибки = СтруктураПараметров.ErrorAddInfo;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("AddImportantInfo") И ЗначениеЗаполнено(СтруктураПараметров.AddImportantInfo)Тогда
		Объект.ДополнениеПорядкаВоспроизведения = СтруктураПараметров.AddImportantInfo;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("DetectionTime") И ЗначениеЗаполнено(СтруктураПараметров.DetectionTime) Тогда
		Объект.ДатаОбнаруженияОшибки = XMLЗначение(Тип("Дата"), СтруктураПараметров.DetectionTime);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("RepoPath") Тогда
		Объект.АдресРепозитория = СтруктураПараметров.RepoPath;
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("ConfigurationName") Тогда
		Объект.ИмяКонфигурации = СтруктураПараметров.ConfigurationName;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ConfigurationVersion") Тогда
		Объект.ВерсияКонфигурации = СтруктураПараметров.ConfigurationVersion;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Responsible") Тогда
		Объект.Ответственный = СтруктураПараметров.Responsible;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("UltimateResponsible") Тогда
		Объект.АбсолютныйОтветственный = СтруктураПараметров.UltimateResponsible;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScenarioSettingsFilter") Тогда
		Объект.ОтборПоНастройкам.ЗагрузитьЗначения(СтрРазделить(СтруктураПараметров.ScenarioSettingsFilter,";"));
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ScenarioFilter") Тогда
		Объект.ОтборПоСценариям.ЗагрузитьЗначения(СтрРазделить(СтруктураПараметров.ScenarioFilter,";"));
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("OutModelDBID") Тогда
		Объект.ФайлЗапускаемыхБаз = СтруктураПараметров.OutModelDBID;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполнятьСборкуСценариев") Тогда
		Объект.ВыполнятьСборкуСценариев = СтруктураПараметров.ВыполнятьСборкуСценариев;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполнятьСборкуПроцессов") Тогда
		Объект.ВыполнятьСборкуПроцессов = СтруктураПараметров.ВыполнятьСборкуПроцессов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Удалить_Платформа = Неопределено)
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если Прав(ПутьКаталога, 1) = ДобавляемыйСимвол Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция УдалитьПодстрокуСлева(СтрокаПоиска, Подстрока, УдалитьВключаяПодстроку=Истина, РезультатПоУмолчанию=Неопределено, УдалитьПоследнееВхождение=Ложь)
	Если Найти(СтрокаПоиска, Подстрока) > 0 Тогда
		Результат = СтрокаПоиска;
		Пока Найти(Результат, Подстрока) > 0 Цикл
			Индекс = СтрДлина(СтрокаПоиска) - Найти(СтрокаПоиска, Подстрока) + 1;
			Индекс = ? (УдалитьВключаяПодстроку, Индекс - СтрДлина(Подстрока), Индекс + 1);
			Результат = СокрЛП(Прав(СтрокаПоиска, Индекс));
			Если Не УдалитьПоследнееВхождение Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	 
	Иначе
		Результат = ? (ЗначениеЗаполнено(РезультатПоУмолчанию), РезультатПоУмолчанию, СтрокаПоиска); 
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция УдалитьСтрокиМодуля(ТекстОшибки, УдалитьЦеликом=Ложь)
	Результат = "";
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ТекстОшибки) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ТекстОшибки, ИндексСтроки);
		ДобавитьСтроку = Истина;
		Если Найти(ТекущаяСтрока, "{ВнешняяОбработка") > 0 Тогда 
			ТекущаяСтрока = УдалитьПодстрокуСлева(ТекущаяСтрока, ")}:");
			ДобавитьСтроку = НЕ УдалитьЦеликом;
		КонецЕсли;
		Если ДобавитьСтроку Тогда
			Результат = Результат + ТекущаяСтрока + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРегистрацииОшибок_Формат_1_6

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОписаниеОшибки() Экспорт

	Ошибка = Новый Структура;
	
	Ошибка.Вставить("ВерсияФормата", "1.6");
	Ошибка.Вставить("УИ",                       Строка(Новый УникальныйИдентификатор));
	Ошибка.Вставить("ТипОшибки",                "");
	Ошибка.Вставить("ИсходнаяИнформация",       "");
	Ошибка.Вставить("ПорядокВоспроизведения",   "");
	Ошибка.Вставить("ОжидаемоеПоведение",       "");
	Ошибка.Вставить("Ответственный",            "");
	Ошибка.Вставить("КодСценария",              "");
	Ошибка.Вставить("ИмяСценария",              "");
	Ошибка.Вставить("ДостоверностьОбнаружения", "Высокая");  // "Высокая" либо "Низкая"
	Ошибка.Вставить("Срочность",                "Высокая"); // "Высокая", "Средняя" либо "Низкая"
	Ошибка.Вставить("АдресРепозитория",         "");
	Ошибка.Вставить("ИмяВетки",                 "");
	
	#Если Клиент Или ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Или ВебКлиент  Тогда
	
		СисИнфо = Новый СистемнаяИнформация;
		Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
		Ошибка.Вставить("КлиентОперативнаяПамять", СисИнфо.ОперативнаяПамять);
		Ошибка.Вставить("КлиентВерсияОС",          СисИнфо.ВерсияОС);
		Ошибка.Вставить("КлиентПроцессор",         СисИнфо.Процессор);
		Ошибка.Вставить("КлиентТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
		Ошибка.Вставить("КлиентИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
		Ошибка.Вставить("КлиентТекущаяДата",       ТекущаяДата());
	
	#КонецЕсли
	
	Ошибка.Вставить("ДатаОбнаружения",   Дата(1,1,1));
	Ошибка.Вставить("ОбъектыМетаданных", Новый Массив); // Возможность добавить массив объектов метаданных
	// Регистрация по одному объекту метаданных
	Ошибка.Вставить("ОбъектМетаданных",      "");
	Ошибка.Вставить("УточнениеРасположения", "");
	Ошибка.Вставить("КодСценария", "");
	Ошибка.Вставить("ИмяСценария", "");
	Ошибка.Вставить("ВерсияКонфигурации", "");
	Ошибка.Вставить("ИмяКонфигурации",    "");

	
	Ошибка.Вставить("ИменаФайлов", Новый Массив);
	
	Возврат Ошибка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьОписаниеОшибкиНаСервере(Ошибка) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС",          СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор",         СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	
	Если Не ЗначениеЗаполнено(Ошибка.ВерсияКонфигурации) Тогда
		Ошибка.ВерсияКонфигурации = Метаданные.Версия;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ИмяКонфигурации) Тогда
		Ошибка.ИмяКонфигурации = Метаданные.Имя;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ДатаОбнаружения) Тогда
		Ошибка.ДатаОбнаружения = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстОшибкиXML(Ошибка) Экспорт
	
	ДополнитьОписаниеОшибкиНаСервере(Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных) ИЛИ ЗначениеЗаполнено(Ошибка.УточнениеРасположения) Тогда
	
		Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, Ошибка.УточнениеРасположения));
	
	КонецЕсли;
	
	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);
	
	Возврат ЗаписьXML.Закрыть()
	
КонецФункции

#КонецОбласти
