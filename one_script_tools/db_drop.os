#Использовать v8runner
#Использовать cmdline
#Использовать irac

Перем СЕРВЕР;
Перем ИМЯ_КЛАСТЕРА;
Перем СЕРВЕР_СУБД;
Перем ИМЯ_БАЗЫ;
Перем ПОЛЬЗОВАТЕЛЬ_СУБД;
Перем ПАРОЛЬ_СУБД;
Перем ПЛАТФОРМА_ВЕРСИЯ;
Перем RAC_PATH;
Перем RAC_PORT;
Перем АДМИН_1С_ИМЯ;
Перем АДМИН_1С_ПАРОЛЬ;
Перем Лог;

Перем ДЕЙСТВИЕ_С_БАЗОЙ_СУБД;

Процедура Инициализация()

    Лог = Логирование.ПолучитьЛог("deleteBase");

    Парсер = Новый ПарсерАргументовКоманднойСтроки();
    Парсер.ДобавитьИменованныйПараметр("-platform");
    Парсер.ДобавитьИменованныйПараметр("-server1c");
    Парсер.ДобавитьИменованныйПараметр("-cluster1c_name");
    Парсер.ДобавитьИменованныйПараметр("-serversql");
    Парсер.ДобавитьИменованныйПараметр("-base_name");
    Парсер.ДобавитьИменованныйПараметр("-admin_1c_name");
    Парсер.ДобавитьИменованныйПараметр("-admin_1c_pwd");
    Парсер.ДобавитьИменованныйПараметр("-sqlpassw");
    Парсер.ДобавитьИменованныйПараметр("-sqluser");
    Парсер.ДобавитьИменованныйПараметр("-rac_path");
    Парсер.ДобавитьИменованныйПараметр("-rac_port");
    Парсер.ДобавитьИменованныйПараметр("-db_operation");
    Парсер.ДобавитьИменованныйПараметр("-verbose");

    Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

    ПЛАТФОРМА_ВЕРСИЯ = Параметры["-platform"];
    СЕРВЕР           = Параметры["-server1c"];
    ИМЯ_КЛАСТЕРА     = Параметры["-cluster1c_name"];
    СЕРВЕР_СУБД      = Параметры["-serversql"];
    
    ИМЯ_БАЗЫ         = Параметры["-base_name"];
    АДМИН_1С_ИМЯ     = Параметры["-admin_1c_name"];
    Если Не ЗначениеЗаполнено(АДМИН_1С_ИМЯ) Тогда
        АДМИН_1С_ИМЯ = "";
    КонецЕсли;
    АДМИН_1С_ПАРОЛЬ  = Параметры["-admin_1c_pwd"];
    Если Не ЗначениеЗаполнено(АДМИН_1С_ПАРОЛЬ) Тогда
        АДМИН_1С_ПАРОЛЬ = "";
    КонецЕсли;

    ПОЛЬЗОВАТЕЛЬ_СУБД = Параметры["-sqluser"];
    Если Не ЗначениеЗаполнено(ПОЛЬЗОВАТЕЛЬ_СУБД) Тогда
        ПОЛЬЗОВАТЕЛЬ_СУБД = "";
    КонецЕсли;
    Если Не ЗначениеЗаполнено(ПАРОЛЬ_СУБД) Тогда
        ПАРОЛЬ_СУБД = "";
    КонецЕсли;

    RAC_PATH = Параметры["-rac_path"];
    RAC_PORT = Параметры["-rac_port"];

    Если Не ЗначениеЗаполнено(RAC_PATH) Тогда
        RAC_PATH = "localhost";
    КонецЕсли;

    Если Не ЗначениеЗаполнено(RAC_PORT) Тогда
        RAC_PORT = 1545;
    КонецЕсли;

    ДЕЙСТВИЕ_С_БАЗОЙ_СУБД = Параметры["-db_operation"];
    Если Не ЗначениеЗаполнено(ДЕЙСТВИЕ_С_БАЗОЙ_СУБД) Тогда
        ДЕЙСТВИЕ_С_БАЗОЙ_СУБД = "";
    КонецЕсли;

    verbose = Параметры["-verbose"];
    Если ЗначениеЗаполнено(verbose) И verbose = "1" Тогда
        Лог.УстановитьУровень(УровниЛога.Отладка);

        Для Каждого СтрПар Из Параметры Цикл
            Лог.Отладка(СтрПар.Ключ + "-" + СтрПар.Значение);
        КонецЦикла;
    КонецЕсли;

    Логирование.ПолучитьЛог("oscript.lib.irac").УстановитьУровень(Лог.Уровень());
    
КонецПроцедуры

Процедура УдалитьСервернуюБазуРАС()

    Лог.Отладка(RAC_PATH);

    СтрокаПодключения = СтрШаблон("%1:%2", СЕРВЕР, RAC_PORT);
    Лог.Отладка("СтрокаПодключения " + СтрокаПодключения);

    Админка = Новый УправлениеКластером1С(RAC_PATH, СтрокаПодключения, ПЛАТФОРМА_ВЕРСИЯ);

    Кластеры = Админка.Кластеры();
    
    Попытка
        ОтборКластеров = Новый Соответствие();
        ОтборКластеров.Вставить("Имя", СтрШаблон("""%1""", ИМЯ_КЛАСТЕРА)); // в отборе имя кластера возвращается в кавычках

        СписокКластеров = Кластеры.Список(ОтборКластеров);
    Исключение
        ВызватьИсключение СтрШаблон("Возникла ошибка при получении списка кластеров");
    КонецПопытки;

    Если СписокКластеров.Количество() <> 1 Тогда
        ТекстИсключения = СтрШаблон("Найдено %1 кластеров по отбору ", СписокКластеров.Количество());
        Для Каждого СтрокаОтбора Из ОтборКластеров Цикл
            ТекстИсключения = ТекстИсключения + Символы.ПС + СтрокаОтбора.Ключ + "-" + СтрокаОтбора.Значение;
        КонецЦикла;

        ВызватьИсключение ТекстИсключения;
    КонецЕсли;

    // Обходим список кластеров
    Для Каждого Кластер Из СписокКластеров Цикл
        Лог.Отладка("Cluster name = " + Кластер.Получить("Имя"));

        ИБКластера = Кластер.ИнформационныеБазы();

        База = ИБКластера.Получить(ИМЯ_БАЗЫ);

        Если База = Неопределено Тогда
            Лог.Отладка("База не найдена");
        Иначе
            База.УстановитьАдминистратора(АДМИН_1С_ИМЯ, АДМИН_1С_ПАРОЛЬ);
            База.Удалить(ДЕЙСТВИЕ_С_БАЗОЙ_СУБД);
            Лог.Отладка("База удалена");
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Попытка
    Инициализация();

    Лог.Информация("Deleting base with RAS...");
    УдалитьСервернуюБазуРАС();

    Лог.Информация("script completed");
Исключение
    ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    Лог.Ошибка(ТекстОшибки);
    ВызватьИсключение ТекстОшибки;
КонецПопытки;